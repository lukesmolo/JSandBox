{
  "name": "Jsandbox",
  "tagline": "An efficient and safe sandbox for JavaScript",
  "body": "#JSandBox: an efficient and safe sandbox for JavaScript\r\n\r\n\r\n> JSandBox is an efficient and safe sandbox for JavaScript, where some JS code is\r\nexecuted in a safe environment. Actually, JSandBox is able to detect several\r\nproblems your JS code could be affected by.\r\n\r\n[JSandBox](https://lukesmolo.github.io/JSandBox)\r\n\r\n##How does it work?\r\nFirst, your JS code is parsed for finding dangerous/not desirable functions, like __eval__,\r\n\t__alert__,  __Function()__ or a custom one. Then, your code is\r\n\texecuted on a local web worker, so in a safe environment, in order to find some syntax errors, or\r\n\t__infinite loops__.\r\n\tIf no problems are detected, you are able to safely execute your JS code.\r\n\t<br>\r\n\tYou can try it [here](/demo/index.html).\r\n\r\n\r\n\r\n##Usage\r\nClone the repository:\r\n```\r\n$ git clone git@github.com:lukesmolo/JSandBox.git\r\n```\r\n\r\nInclude JSandBox in your page:\r\n```html\r\n<script type=\"text/javascript\" src=\"JSandBox.js\"></script>\r\n```\r\nYou have to include [JQuery](https://jquery.com/) too.\r\n\r\nCall JSandBox on the code you want to check.\r\n```javascript\r\nvar code = 'alert(\"hello world\")';\r\ncode.JSandBox();\r\n```\r\n\r\nBy default, JSandBox have these options enabled:\r\n```javascript\r\nvar settings = {\r\n\t\t'check_functions': true,\r\n\t\t'check_syntax': true,\r\n\t\t'check_loops': true,\r\n\t\t'functions': ['alert', 'eval', 'Function'],\r\n\t\t'worker': 'JSandBox-worker.js',\r\n\t\t'timeout' : 2000,\r\n\t\t'callback' : null\r\n};\r\n```\r\n#####__check\\_functions__, __check\\_syntax__, __check\\_loops__\r\nspecify which features are enabled. You can disable what you want, but please, take into account that\r\n_check\\_loops_ requires _check\\_syntax_ too. Also remember that without\r\n_check\\_loops_ enabled, your worker could loop forever.\r\n\r\n#####functions\r\nspecify which functions are not allowed. For example:\r\n\r\n```javascript\r\n['alert', 'eval', 'Function', 'myFunc']\r\n\r\n```\r\n#####worker\r\nspecify the path of the web worker. According to [http://www.w3.org/TR/workers/](https://www.w3.org/TR/workers):\r\n> When the Worker(scriptURL) constructor is invoked, the user agent must run the following steps:\r\n<br>\r\n**1)** Resolve the scriptURL argument relative to the entry script's base URL, when the method is invoked.\r\n\r\n#####timeout\r\nspecify the timeout after which worker will be stopped.\r\n\r\n\r\n#####callback\r\nspecify a callback for returning your JS code status. By default, there is a\r\nsimple alert. A callback has to be defined in this way:\r\n```javascript\r\nfunction myCallback(msg, error)\r\n```\r\n_msg_ is a string containing the description of the returned status, _error_ is a\r\nflag set when there is a problem.\r\n\r\n##Demo\r\nYou can find a demo [here](/demo/index.html).\r\n\r\n##License\r\nJSandBox is released under the MIT License.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}